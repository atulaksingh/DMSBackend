************************************import excel with no. of data entier and directly create the entries in db**********************************
class ExcelImportView(APIView):
    parser_classes = [MultiPartParser]

    def post(self, request, pk, *args, **kwargs):
        # Get the client using the pk from the URL
        try:
            client = Client.objects.get(pk=pk)
        except Client.DoesNotExist:
            return Response({"error": "Client not found"}, status=404)

        file = request.FILES['file']

        # Load the workbook and select the active worksheet
        wb = load_workbook(file)
        ws = wb.active

        pf_entries = []

        # Iterate through the rows in the Excel file and create PF objects
        for row in ws.iter_rows(min_row=2):  # Skip the header row
            employee_code = row[0].value
            employee_name = row[1].value
            # Check if essential fields are not None (you can adjust which fields to check)
            if not employee_code or not employee_name:
                continue  # Skip the row if it does not have the essential fields

            # Get the rest of the values
            uan = row[2].value
            pf_number = row[3].value
            pf_deducted = row[4].value
            date_of_joining = row[5].value
            status = row[6].value
            month = row[7].value
            gross_ctc = row[8].value
            basic_pay = row[9].value
            hra = row[10].value
            statutory_bonus = row[11].value
            special_allowance = row[12].value
            pf = row[13].value
            gratuity = row[14].value
            total_gross_salary = row[15].value
            number_of_days_in_month = row[16].value
            present_days = row[17].value
            lwp = row[18].value
            leave_adjustment = row[19].value
            gender = row[20].value
            basic_pay_monthly = row[21].value
            hra_monthly = row[22].value
            statutory_bonus_monthly = row[23].value
            special_allowance_monthly = row[24].value
            total_gross_salary_monthly = row[25].value
            provident_fund = row[26].value
            professional_tax = row[27].value
            advance = row[28].value
            esic_employee = row[29].value
            tds = row[30].value
            total_deduction = row[31].value
            net_pay = row[32].value
            advance_esic_employer_cont = row[33].value

            # Create the PF object and associate it with the client
            pf_entry = PF(
                client=client,
                employee_code=employee_code,
                employee_name=employee_name,
                uan=uan,
                pf_number=pf_number,
                pf_deducted=pf_deducted,
                date_of_joining=date_of_joining,
                status=status,
                month=month,
                gross_ctc=gross_ctc,
                basic_pay=basic_pay,
                hra=hra,
                statutory_bonus=statutory_bonus,
                special_allowance=special_allowance,
                pf=pf,
                gratuity=gratuity,
                total_gross_salary=total_gross_salary,
                number_of_days_in_month=number_of_days_in_month,
                present_days=present_days,
                lwp=lwp,
                leave_adjustment=leave_adjustment,
                gender=gender,
                basic_pay_monthly=basic_pay_monthly,
                hra_monthly=hra_monthly,
                statutory_bonus_monthly=statutory_bonus_monthly,
                special_allowance_monthly=special_allowance_monthly,
                total_gross_salary_monthly=total_gross_salary_monthly,
                provident_fund=provident_fund,
                professional_tax=professional_tax,
                advance=advance,
                esic_employee=esic_employee,
                tds=tds,
                total_deduction=total_deduction,
                net_pay=net_pay,
                advance_esic_employer_cont=advance_esic_employer_cont,
            )
            pf_entry.save()
            pf_entries.append(pf_entry)

        return Response({"status": "success", "data": PfSerializer(pf_entries, many=True).data})


**************************with modification of unqiue employee code and month and update if existing unique fields*********************************

class ExcelImportView(APIView):
    parser_classes = [MultiPartParser]

    def post(self, request, pk, *args, **kwargs):
        # Get the client using the pk from the URL
        try:
            client = Client.objects.get(pk=pk)
        except Client.DoesNotExist:
            return Response({"error": "Client not found"}, status=404)

        file = request.FILES['file']

        # Load the workbook and select the active worksheet
        wb = load_workbook(file)
        ws = wb.active

        pf_entries = []

        # Iterate through the rows in the Excel file and create/update PF objects
        for row in ws.iter_rows(min_row=2):  # Skip the header row
            employee_code = row[0].value
            employee_name = row[1].value

            # Check if essential fields are not None
            if not employee_code or not employee_name:
                continue  # Skip the row if it does not have the essential fields

            # Get the rest of the values
            uan = row[2].value
            pf_number = row[3].value
            pf_deducted = row[4].value
            date_of_joining = row[5].value
            status = row[6].value
            month = row[7].value
            gross_ctc = row[8].value
            basic_pay = row[9].value
            hra = row[10].value
            statutory_bonus = row[11].value
            special_allowance = row[12].value
            pf = row[13].value
            gratuity = row[14].value
            total_gross_salary = row[15].value
            number_of_days_in_month = row[16].value
            present_days = row[17].value
            lwp = row[18].value
            leave_adjustment = row[19].value
            gender = row[20].value
            basic_pay_monthly = row[21].value
            hra_monthly = row[22].value
            statutory_bonus_monthly = row[23].value
            special_allowance_monthly = row[24].value
            total_gross_salary_monthly = row[25].value
            provident_fund = row[26].value
            professional_tax = row[27].value
            advance = row[28].value
            esic_employee = row[29].value
            tds = row[30].value
            total_deduction = row[31].value
            net_pay = row[32].value
            advance_esic_employer_cont = row[33].value

            # Check if the entry already exists
            instance = PF.objects.filter(employee_code=employee_code, month=month, client=client).first()

            if instance:
                # Update the existing instance with new values
                instance.employee_name = employee_name
                instance.uan = uan
                instance.pf_number = pf_number
                instance.pf_deducted = pf_deducted
                instance.date_of_joining = date_of_joining
                instance.status = status
                instance.gross_ctc = gross_ctc
                instance.basic_pay = basic_pay
                instance.hra = hra
                instance.statutory_bonus = statutory_bonus
                instance.special_allowance = special_allowance
                instance.pf = pf
                instance.gratuity = gratuity
                instance.total_gross_salary = total_gross_salary
                instance.number_of_days_in_month = number_of_days_in_month
                instance.present_days = present_days
                instance.lwp = lwp
                instance.leave_adjustment = leave_adjustment
                instance.gender = gender
                instance.basic_pay_monthly = basic_pay_monthly
                instance.hra_monthly = hra_monthly
                instance.statutory_bonus_monthly = statutory_bonus_monthly
                instance.special_allowance_monthly = special_allowance_monthly
                instance.total_gross_salary_monthly = total_gross_salary_monthly
                instance.provident_fund = provident_fund
                instance.professional_tax = professional_tax
                instance.advance = advance
                instance.esic_employee = esic_employee
                instance.tds = tds
                instance.total_deduction = total_deduction
                instance.net_pay = net_pay
                instance.advance_esic_employer_cont = advance_esic_employer_cont

                instance.save()  # Save the updated instance
            else:
                # Create a new PF entry if it doesn't exist
                pf_entry = PF(
                    client=client,
                    employee_code=employee_code,
                    employee_name=employee_name,
                    uan=uan,
                    pf_number=pf_number,
                    pf_deducted=pf_deducted,
                    date_of_joining=date_of_joining,
                    status=status,
                    month=month,
                    gross_ctc=gross_ctc,
                    basic_pay=basic_pay,
                    hra=hra,
                    statutory_bonus=statutory_bonus,
                    special_allowance=special_allowance,
                    pf=pf,
                    gratuity=gratuity,
                    total_gross_salary=total_gross_salary,
                    number_of_days_in_month=number_of_days_in_month,
                    present_days=present_days,
                    lwp=lwp,
                    leave_adjustment=leave_adjustment,
                    gender=gender,
                    basic_pay_monthly=basic_pay_monthly,
                    hra_monthly=hra_monthly,
                    statutory_bonus_monthly=statutory_bonus_monthly,
                    special_allowance_monthly=special_allowance_monthly,
                    total_gross_salary_monthly=total_gross_salary_monthly,
                    provident_fund=provident_fund,
                    professional_tax=professional_tax,
                    advance=advance,
                    esic_employee=esic_employee,
                    tds=tds,
                    total_deduction=total_deduction,
                    net_pay=net_pay,
                    advance_esic_employer_cont=advance_esic_employer_cont,
                )
                pf_entry.save()  # Save the new instance
                pf_entries.append(pf_entry)

        return Response({"status": "success", "data": PfSerializer(pf_entries, many=True).data})